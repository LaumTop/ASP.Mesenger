@page "/Register"
@rendermode InteractiveServer
@using System.Net
@using System.Net.Mail
@using System.Text
@using System.Text.RegularExpressions
@using Messenger.Services
@using Messenger.Models
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService

<img class="userIcon" src="bootstrap/Pictures/User.png" />
<div class="square"></div>

<div class="inputData">
    <input class="@GetUsernameClass()" type="text" id="username" @bind="username" placeholder="Login" />
    <input class="@GetPasswordClass()" type="password" id="password" @bind="password" placeholder="Password" />
    <input class="@GetEmailClass()" type="email" id="email" @bind="email" placeholder="example@gmail.com" />
</div>
<button class="login" @onclick="Registers">Register</button>

@code {
    private string username = "";
    private string password = "";
    private string email = "";

    private bool isUsernameValid = true;
    private bool isPasswordValid = true;
    private bool isEmailValid = true;

    private async Task Registers()
    {
        await ValidateInputs();

        if (isUsernameValid && isPasswordValid && isEmailValid)
        {
            var request = new Users(username, password, email);
            RegistrationService.RequestedUsers.Add(request);  // Ensure the correct User class is used here

            var code = await GenerateUniqueCode(); // await GenerateUniqueCode to get the code
            if (code != null)
            {
                NavigationManager.NavigateTo("/Confirm");
                SendConfirmationEmail(code, email);
                RegistrationService.ConfirmRegister.Add(new KeyValuePair<string, string>(code, email));
            }
        }
        else
        {
            Console.WriteLine($"{isUsernameValid} + {isPasswordValid} + {isEmailValid}");
        }
    }

    private async Task ValidateInputs()
    {
        isUsernameValid = !string.IsNullOrEmpty(username) && username.Length >= 4 && await FindUser(username);
        isPasswordValid = !string.IsNullOrEmpty(password);
        isEmailValid = IsValidEmail(email);
    }

    private async Task<bool> FindUser(string username)
    {
        Json json = new Json();
        bool answer = true;
        foreach (var item in await json.LoadUsers())
        {
            if (item.Username == username)
            {
                answer = false;
                break;
            }
        }

        return answer;
    }

    private async Task<string> GenerateUniqueCode()
    {
        Random random = new Random();
        StringBuilder code = new StringBuilder();

        bool finish = true;
        while (finish)
        {
            code.Clear();
            for (int i = 0; i < 8; i++)
            {
                code.Append(random.Next(10));
            }

            if (!RegistrationService.SecretCodes.Contains(code.ToString()))
            {
                finish = false;
                RegistrationService.SecretCodes.Add(code.ToString());
                
                _ = Task.Delay(TimeSpan.FromMinutes(5)).ContinueWith(_ =>
                {
                    string capturedCode = code.ToString();
                    RegistrationService.SecretCodes.Remove(capturedCode);
                    RegistrationService.ConfirmRegister.RemoveAll(kvp => kvp.Key == capturedCode);
                });

                return code.ToString();
            }
        }
    
        return null;
    }

    private void SendConfirmationEmail(string code, string email)
    {
        try
        {
            var sender = new MailAddress("LaumTopMessenger@gmail.com", "Laumtop Messenger");
            var to = new MailAddress(email);
            var message = new MailMessage(sender, to)
            {
                Subject = "Finish Register",
                Body = $"<h2>Please enter this code: {code}</h2>",
                IsBodyHtml = true
            };

            using var smtp = new SmtpClient("smtp.gmail.com", 587)
            {
                Credentials = new NetworkCredential("LaumTopMessenger@gmail.com", ""),
                EnableSsl = true
            };

            smtp.Send(message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending email: {ex.Message}");
        }
    }

    private string GetUsernameClass()
    {
        return isUsernameValid ? "Register_Login" : "Register_Login invalid";
    }

    private string GetPasswordClass()
    {
        return isPasswordValid ? "Register_Password" : "Register_Password invalid";
    }

    private string GetEmailClass()
    {
        return isEmailValid ? "Register_Email" : "Register_Email invalid invalid-email";
    }

    public static bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return false;
        }

        try
        {
            const string pattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
            var regex = new Regex(pattern, RegexOptions.IgnoreCase);
            return regex.IsMatch(email);
        }
        catch (Exception)
        {
            return false;
        }
    }
}